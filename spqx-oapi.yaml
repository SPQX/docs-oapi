openapi: "3.0.2"
info:
  description: "This is the API documentation for the management and budget services of \
  SPQ Express.  More information can be found in the links below."
  version: "0.0.1"
  title: "SPQ Express"
  termsOfService: "https://www.spqexpress.com/tos"
  contact:
    email: "jcatronspqx@gmail.com"
  license:
    name: "Private License"
    url: "https://www.spqexpress/license"
externalDocs:
  description: "Find out more about SPQ Express"
  url: "https://www.spqexpress.com"
servers:
  - url: http://api.spqexpress.com
    description: Production server
  - url: http://api-uat.spqexpress.com
    description: Staging server
  - url: http://localhost:8080
    description: Development server
tags:
- name: Products
  description: "Management of products used for price calculation"
  externalDocs:
    description: "For more information"
    url: "https://www.spqexpress.com/services/management"
- name: Units
  description: "Management of units used for price calculation"
  externalDocs:
    description: "For more information"
    url: "https://www.spqexpress.com/services/management"
- name: Tasks
  description: "Management of tasks used for price calculation"
  externalDocs:
    description: "For more information"
    url: "https://www.spqexpress.com/services/management"
- name: Sub Tasks
  description: "Management of sub tasks used for price calculation"
  externalDocs:
    description: "For more information"
    url: "https://www.spqexpress.com/services/management"
paths:
  /products:
    get:
      summary: List product configurations
      description: >
        This resource provides a list of products in the system.
        Each product will be unique by numeric `id`.
      responses:
        '200':
          description: A JSON object representation of a Product
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Product'
        '401':
          description: Authorization header is missing or invalid
      tags:
        - "Products"
    post:
      summary: Create a product configuration
      description: >
        This resource creates a new product configuration in the system.
        The product will be saved with the provided configuration and a
        unique `id` generated by the system.
      requestBody:
        $ref: '#/components/requestBodies/NewProductBody'
      responses:
        '200':
          $ref: '#/components/responses/ProductResponse'
      tags:
        - "Products"
    put:
      summary: Replace a product configuration
      description: >
        This resource overwrites a product configuration in the system.
        The product will be saved with the provided configuration overwriting
        the existing product found by the unique `id`.
      requestBody:
        $ref: '#/components/requestBodies/ProductBody'
      responses:
        '200':
          $ref: '#/components/responses/ProductResponse'
      tags:
        - "Products"
  /products/{id}:
    get:
      summary: Get a product configuration
      description: >
        This resource provides the product configuration for the
        product with the given unique `id` in the path.
      parameters:
        - $ref: '#/components/parameters/productId'
      responses:
        '200':
          $ref: '#/components/responses/ProductResponse'
      tags:
        - "Products"
    delete:
      summary: Remove a product configuration
      description: >
        Removes the product configuration for the given
        unique product `id` in the path.
      parameters:
        - $ref: '#/components/parameters/productId'
      responses:
        '204':
          description: Successfully removed the resource, no content will be returned
      tags:
        - "Products"
  /products/{id}/units:
    get:
      summary: Get a product configuration
      description: >
        This resource provides the product configuration for the
        product for the given unique product `id` in the path.
      responses:

      tags:
        - "Units"
  /products/{id}/units/{id}:
    get:
      summary: Get a product configuration
      description: >
        This resource provides the product configuration for the
        product for the given unique product `id` in the path.
      responses:

      tags:
        - "Units"
  /products/{id}/{unit-id}/tasks:
    get:
      summary: Get a product configuration
      description: >
        This resource provides the product configuration for the
        product for the given unique product `id` in the path.
      responses:

      tags:
        - "Tasks"
  /products/{id}/{unit-id}/tasks/{id}:
    get:
      summary: Get a product configuration
      description: >
        This resource provides the product configuration for the
        product for the given unique product `id` in the path.
      responses:

      tags:
        - "Tasks"
  /products/{id}/{unit-id}/{task-id}/subtasks:
    get:
      summary: Get a product configuration
      description: >
        This resource provides the product configuration for the
        product for the given unique product `id` in the path.
      responses:

      tags:
        - "Sub Tasks"
  /products/{id}/{iunit-id}/{task-id}/subtasks/{id}:
    get:
      summary: Get a product configuration
      description: >
        This resource provides the product configuration for the
        product for the given unique product `id` in the path.
      responses:

      tags:
        - "Sub Tasks"
components:
  schemas: # todo required fields
    NewProduct:
      type: object
      properties:
        displayName:
          type: string
    Product:
      allOf:
        - properties:
            id:
              type: integer
        - $ref: '#/components/schemas/NewProduct'
    Unit:
      type: object
      properties:
        displayName:
          type: string
        location:
          type: string
        UOM:
          type: string
        countryAttribute:
          type: string #todo this should be an attribute
        country:
          type: string
        startDateAttribute:
          type: string
        startDate:
          type: string
        endDateAttribute:
          type: string
        endDate:
          type: string
        quantityFormula:
          type: string
        formulatAttributes:
          type: array
          items:
            type: integer
  requestBodies:
    ProductBody:
      description: A JSON object representation of a Product
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Product'
    NewProductBody:
      description: A JSON object representation of a Product
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/NewProduct'
  responses:
    ProductResponse:
      description: A JSON object representation of a Product
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Product'
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  parameters:
    productId:
      in: path
      name: id
      required: true
      schema:
        type: integer
      description: Numberic id of the product
security:
  - bearerAuth: []